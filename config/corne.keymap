/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

    #include <behaviors.dtsi>
    #include <dt-bindings/zmk/keys.h>
    #include <dt-bindings/zmk/bt.h>

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    td0: tap_dance_0 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_0";
      #binding-cells = <0>;
   tapping-term-ms = <200>;
      bindings = <&hm RGUI SEMI>, <&kp SQT>;
    };

    td1: tap_dance_1 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_1";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mt LCTRL TAB>, <&kp ESC>;
    };
  };

combos {
    compatible = "zmk,combos";
    combo_cword {
      timeout-ms = <50>;
      key-positions = <16 19>;
      bindings = <&caps_word>;
    };

    combo_vimwq {
      timeout-ms = <50>;
      key-positions = <1 2>;
      bindings = <&vim_quit>;
    };
  };

macros {
        vim_quit: vim_quit {
            label = "ZM_vim_quit";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp ESC &kp COLON &kp W &kp Q>;
        };
    };

keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  **  |  Q  |  W  |  E  |  R  |  T  |** |  Y  |  U   |  I  |  O  |  P     | **   |
// |  **  |  A  |  S  |  D  |  F  |  G  |** |  H  |  J   |  K  |  L  |  BKSP  | **   |
// |  **  |  Z  |  X  |  C  |  V  |  B  |** |  N  |  M   |  ,  |  .  |  /     | **   |
//                    | GUI | LWR | ENT |** | SPC | RSE  | ALT |
                        bindings = <
&none /**/ &kp Q     &kp W &kp E &kp R &kp T  /**/ &kp Y &kp U  &kp I     &kp O   &kp P    /**/ &none
&none /**/ &kp A &kp S &kp D &kp F &kp G      /**/ &kp H &kp J  &kp K     &kp L   &kp BSPC /**/ &none
&none /**/ &kp Z &kp X &kp C &kp V &kp B      /**/ &kp N &kp M  &kp COMMA &kp DOT &kp FSLH /**/ &none
                  &kp LGUI &mo 1 &kp RET      /**/    &kp SPACE &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  **  |  1   |  2  |  3  |  4  |  5  |** |  6  |  7  |  8  |  9  |  0    | ** |
// |  **  | BT1  | BT2 | BT3 | BT4 | BT5 |** | LFT | DWN |  UP | RGT |  BKSP | ** |
// |  **  | BTCLR|     |     |     |     |** |     |     |     |     |       | ** |
//                     | GUI |     | ENT |   | SPC |     | ALT |
                        bindings = <
&none /**/ &kp N1       &kp N2       &kp N3       &kp N4       &kp N5       /**/ &kp N6     &kp N7   &kp N8 &kp N9    &kp N0   /**/ &none
&none /**/ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 /**/ &kp LEFT   &kp DOWN &kp UP &kp RIGHT &kp BSPC /**/ &none
&none /**/ &bt BT_CLR   &trans       &trans       &trans       &trans       /**/ &trans     &trans   &trans &trans    &trans   /**/ &none
                                    &kp LGUI     &trans       &kp RET       /**/  &kp SPACE  &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  **  |  !  |  @  |  #  |  $  |  %  | **  |  ^  |  &  |  *  |  (  |  )  | ** |
// |  **  |     |     |     |     |     | **  |  -  |  =  |  [  |  ]  |  \  | ** |
// |  **  |     |     |     |     |     | **  |  _  |  +  |  {  |  }  | "|" | ** |
//                    | GUI |     | ENT | SPC |     | ALT |
                        bindings = <
&none /**/  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT /**/ &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR /**/ &none
&none /**/  &trans   &trans &trans   &trans   &trans    /**/ &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH /**/ &none
&none /**/  &trans   &trans &trans   &trans   &trans    /**/ &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE /**/ &none
                             &kp LGUI &trans   &kp RET  /**/  &kp SPACE   &trans    &kp RALT
                        >;
                };
        };
};
